#!/bin/bash
# macOS compatible readlink
if [[ "$OSTYPE" == "darwin"* ]]; then
    SCRIPT="$(python3 -c "import os; print(os.path.realpath('${BASH_SOURCE:-${0}}'))")"
else
    SCRIPT="$(readlink -f "${BASH_SOURCE:-${0}}")"
fi
BASEDIR="$(dirname "${SCRIPT}")"
SCRIPT="$(basename "${SCRIPT}")"

set -euo pipefail

timestamp()
{
	if [[ "$OSTYPE" == "darwin"* ]]; then
		/bin/date -u "+%Y-%m-%dT%H:%M:%S.000000000Z"
	else
		date -Ins -u
	fi
}

say()
{
	echo -e "$(timestamp): ${@}"
}

err()
{
	say "‚ùå ${@}"
}

fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

CURRENT_USER="$(id -un)"
HOME="$(eval echo ~${CURRENT_USER})"

if [ ! -d "${HOME}" ] ; then
	err "‚ùå No home directory [${HOME}] for user [${CURRENT_USER}] ... can't configure AWS"
	exit 0
fi

#
# Set up the AWS configuration
#
[[ -n "${AWS_CONFIG:-}" ]] || AWS_CONFIG="${HOME}/.aws/config"
[[ -n "${AWS_CREDS:-}" ]] || AWS_CREDS="${HOME}/.aws/credentials"
[[ -n "${AWS_PROFILE:-}" ]] || AWS_PROFILE="armedia-marketplace"

if [ -f "${AWS_CONFIG}" ] ; then
	say "‚úÖ The AWS configuration is already created at [${AWS_CONFIG}] for user ${CURRENT_USER}..."

	# Remove any existing "armedia-marketplace" profiles
	say "üëâ Removing the existing ${AWS_PROFILE} profile from the AWS configuration..."
	if [[ "$OSTYPE" == "darwin"* ]]; then
		# macOS sed requires backup extension with -i
		sed -i '' \
			-e '/^[[:space:]]*\[[[:space:]]*profile[[:space:]]\+'"${AWS_PROFILE}"'[[:space:]]*\][[:space:]]*$/,/^[[:space:]]*\[/{/^[[:space:]]*\[[[:space:]]*profile[[:space:]]\+'"${AWS_PROFILE}"'[[:space:]]*\][[:space:]]*$/d;/^[[:space:]]*\[/!d;}' \
			-e '/^[[:space:]]*\[[[:space:]]*'"${AWS_PROFILE}"'[[:space:]]*\][[:space:]]*$/,/^[[:space:]]*\[/{/^[[:space:]]*\[[[:space:]]*'"${AWS_PROFILE}"'[[:space:]]*\][[:space:]]*$/d;/^[[:space:]]*\[/!d;}' \
			"${AWS_CONFIG}"
	else
		sed -i \
			-e '/^\s*\[\s*profile\s\+'"${AWS_PROFILE}"'\s*\]\s*$/,/^\s*\[/{/^\s*\[\s*profile\s\+'"${AWS_PROFILE}"'\s*\]\s*$/d;/^\s*\[/!d}' \
			-e '/^\s*\[\s*'"${AWS_PROFILE}"'\s*\]\s*$/,/^\s*\[/{/^\s*\[\s*'"${AWS_PROFILE}"'\s*\]\s*$/d;/^\s*\[/!d}' \
			"${AWS_CONFIG}"
	fi
else
	say "üëâ Creating your AWS configuration for user ${CURRENT_USER}..."
	mkdir -p "$(dirname "${AWS_CONFIG}")"
	cat <<-EOF > "${AWS_CONFIG}"
	[default]
	region=us-east-1
	EOF
fi

say "üëâ Adding the ${AWS_PROFILE} profile to the AWS configuration at [${AWS_CONFIG}]..."
cat <<-EOF >> "${AWS_CONFIG}"

[profile ${AWS_PROFILE}]
region = us-east-1
EOF
say "‚úÖ Profile added!"

CREDS="${BASEDIR}/aws-marketplace.bin"

if [ -f "${CREDS}" ] ; then
	say "üîë Decrypting the AWS credentials..."
	if CREDS="$(openssl aes-256-cbc -a -A -d -salt -iter 1000 -in "${CREDS}")" ; then
		if [ -f "${AWS_CREDS}" ] ; then
			say "‚úÖ The AWS credentials are already created at [${AWS_CREDS}] for user ${CURRENT_USER}..."

			# Remove any existing "armedia-marketplace" profiles
			say "üëâ Removing the existing ${AWS_PROFILE} profile from the AWS credentials..."
			if [[ "$OSTYPE" == "darwin"* ]]; then
				# macOS sed requires backup extension with -i
				sed -i '' \
					-e '/^[[:space:]]*\[[[:space:]]*'"${AWS_PROFILE}"'[[:space:]]*\][[:space:]]*$/,/^[[:space:]]*\[/{/^[[:space:]]*\[[[:space:]]*'"${AWS_PROFILE}"'[[:space:]]*\][[:space:]]*$/d;/^[[:space:]]*\[/!d;}' \
					"${AWS_CREDS}"
			else
				sed -i \
					-e '/^\s*\[\s*'"${AWS_PROFILE}"'\s*\]\s*$/,/^\s*\[/{/^\s*\[\s*'"${AWS_PROFILE}"'\s*\]\s*$/d;/^\s*\[/!d}' \
					"${AWS_CREDS}"
			fi
		fi
		cat <<-EOF >> "${AWS_CREDS}"
		[${AWS_PROFILE}]
		${CREDS}
		EOF
		say "üîì Credentials decrypted and configured!"
	else
		err "Unable to decrypt the credentials for AWS..."
		CREDS=""
	fi
else
	CREDS=""
fi

if [ -z "${CREDS}" ] ; then
	say "üëâ Please remember to add the AWS credentials to the credentials file at [${AWS_CREDS}], like so:"
	cat <<-EOF
	[${AWS_PROFILE}]
	aws_access_key_id=\${YOUR_AWS_ACCESS_KEY_ID}
	aws_secret_access_key=\${YOUR_AWS_SECRET_ACCESS_KEY}
	EOF
fi
exit 0
