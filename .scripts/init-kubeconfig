#!/bin/bash
# macOS compatible readlink
if [[ "$OSTYPE" == "darwin"* ]]; then
    SCRIPT="$(python3 -c "import os; print(os.path.realpath('${BASH_SOURCE:-${0}}'))")"
else
    SCRIPT="$(readlink -f "${BASH_SOURCE:-${0}}")"
fi
BASEDIR="$(dirname "${SCRIPT}")"
SCRIPT="$(basename "${SCRIPT}")

set -euo pipefail

timestamp()
{
	if [[ "$OSTYPE" == "darwin"* ]]; then
		/bin/date -u "+%Y-%m-%dT%H:%M:%S.000000000Z"
	else
		date -Ins -u
	fi
}

say()
{
	echo -e "$(timestamp): ${@}"
}

ok()
{
	say "✅ ${@}"
}

err()
{
	say "❌ ${@}"
}

fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

cleanup()
{
	rm -rf "${NEW_CONFIG}" &>/dev/null || true
}

CURRENT_USER="$(id -un)"
HOME="$(eval echo ~${CURRENT_USER})"

if [ ! -d "${HOME}" ] ; then
	err "❌ No home directory [${HOME}] for user [${CURRENT_USER}] ... can't configure the Kubeconfig"
	exit 0
fi

KUBE_DIR="${HOME}/.kube"
MASTER="${KUBE_DIR}/config"
NEW_CONFIG="/etc/kubernetes/admin.conf"

say "👉 Configuring your K8s cluster access settings"
TGT="$(mktemp)"
sudo cat "${NEW_CONFIG}" > "${TGT}"
NEW_CONFIG="${TGT}"
trap cleanup EXIT
unset TGT

# Change the names for convenience
if [[ "$OSTYPE" == "darwin"* ]]; then
	# macOS sed requires backup extension with -i
	sed -i '' \
		-e 's;\(user\|name\):\s\+kubernetes-admin$;\1: local;g' \
		-e 's;\(cluster\|name\):\s\+kubernetes$;\1: local;g' \
		-e 's;\(current-context\|name\):\s\+kubernetes-admin@kubernetes$;\1: local;g' \
		"${NEW_CONFIG}"
else
	sed -i \
		-e 's;\(user\|name\):\s\+kubernetes-admin$;\1: local;g' \
		-e 's;\(cluster\|name\):\s\+kubernetes$;\1: local;g' \
		-e 's;\(current-context\|name\):\s\+kubernetes-admin@kubernetes$;\1: local;g' \
		"${NEW_CONFIG}"
fi

export KUBECONFIG="${NEW_CONFIG}:${MASTER}"
mkdir -p "${KUBE_DIR}"

say "👉 Merging the kubeconfig data into the master file"
if command -v sponge &>/dev/null; then
	kubectl config view --flatten | sponge "${MASTER}"
else
	# Fallback if sponge is not available
	TMPFILE="$(mktemp)"
	kubectl config view --flatten > "${TMPFILE}"
	mv "${TMPFILE}" "${MASTER}"
fi

# Make sure we're using the local context
kubectl config use-context local || fail "Failed to set the current context to 'local'"

chown -R "${CURRENT_USER}:" "${KUBE_DIR}"
chmod -R go-rwx "${KUBE_DIR}"

kubectl config get-contexts
ok "Cluster access configured"
