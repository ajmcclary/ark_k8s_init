#!/bin/bash
# macOS compatible readlink
if [[ "$OSTYPE" == "darwin"* ]]; then
    SCRIPT="$(python3 -c "import os; print(os.path.realpath('${0}'))")"
else
    SCRIPT="$(readlink -f "${0}")"
fi
BASEDIR="$(dirname "${SCRIPT}")"
SCRIPT="$(basename "${SCRIPT}")"

set -e -o pipefail

echo_run()
{
	local ARGS=("${@}")
	echo "${ARGS[@]@Q}"
	"${@}"
}

CALICO_VERSION="v3.29.1"

LOCAL_IFACE="kubelocal0"

[ -v CALICO_IFACE ] || CALICO_IFACE=""

# If the local interface has been enabled, use that one for Calico
ip addr show "${LOCAL_IFACE}" &>/dev/null && CALICO_IFACE="${LOCAL_IFACE}"

echo "Trying to discover the CIDR configuration for Calico..."
for (( i = 0 ; i < 60 ; i++ )) ; do
	NEW_CIDR="$(fgrep -m 1 -- "--cluster-cidr=" < <(kubectl --context "local" cluster-info dump) || true)"
	[ -z "${NEW_CIDR}" ] || break
	sleep 1
done

echo "Checking whether the discovered CIDR is valid..."
if [[ "${NEW_CIDR}" =~ ^.*--cluster-cidr=([0-9./]+).*$ ]] ; then
	NEW_CIDR="${BASH_REMATCH[1]}"
	echo "The configuration is valid!! CIDR = ${NEW_CIDR}"
else
	echo "The configuration is not recognized - [${NEW_CIDR}]"
	exit 1
fi

if [[ "${NEW_CIDR}" =~ ^[0-9./]+$ ]] ; then
	# First things first: add the operator
	echo "Configuring Calico for CIDR [${NEW_CIDR}]..."
	echo_run kubectl --context "local" create -f "https://raw.githubusercontent.com/projectcalico/calico/${CALICO_VERSION}/manifests/tigera-operator.yaml"
	CONFIG="$(sed -e "s;cidr: [0-9./]\+;cidr: ${NEW_CIDR};g" < \
		<(curl "https://raw.githubusercontent.com/projectcalico/calico/${CALICO_VERSION}/manifests/custom-resources.yaml") )"

	if [ -n "${CALICO_IFACE}" ] ; then
		CONFIG="$(echo -n "${CONFIG}" | \
			sed -e "/calicoNetwork:/a \ \ \ \ nodeAddressAutodetectionV4:" | \
			sed -e "/nodeAddressAutodetectionV4:/a \ \ \ \ \ \ interface: '${CALICO_IFACE}'"
		)"
	fi

	echo -e "Configuration: \n${CONFIG}"
	echo_run kubectl --context "local" create -f - <<< "${CONFIG}"
else
	echo "Unrecognized cluster CIDR format: [${NEW_CIDR}] - can't parse and configure Calico automatically"
	exit 1
fi
