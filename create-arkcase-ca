#!/bin/bash
# macOS compatible readlink
if [[ "$OSTYPE" == "darwin"* ]]; then
    SCRIPT="$(python3 -c "import os; print(os.path.realpath('${BASH_SOURCE:-${0}}'))")"
else
    SCRIPT="$(readlink -f "${BASH_SOURCE:-${0}}")"
fi

set -euo pipefail

export BASE_DIR="$(dirname "${SCRIPT}")"
export SCRIPT_DIR="${BASE_DIR}/.scripts"

timestamp()
{
	if [[ "$OSTYPE" == "darwin"* ]]; then
		/bin/date -u "+%Y-%m-%dT%H:%M:%S.000000000Z"
	else
		/usr/bin/date -Ins -u
	fi
}

say()
{
	echo -e "$(timestamp): ${@}"
}

ok()
{
	say "✅ ${@}"
}

doing()
{
	say "👉 ${@}"
}

err()
{
	say "❌ ${@}"
}

quit()
{
	say "🚪 ${@}"
	exit 0
}

fail()
{
	err "${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

validate_cert_secret()
{
	local CONTEXT="${1}"
	local NAMESPACE="${2}"
	local SECRET="${3}"
	local KEY="${4}"

	# Find the certificate secret
	local JSON=""
	JSON="$(kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" get secret "${SECRET}" -o json 2>/dev/null)" || return 1
	[ -n "${JSON}" ] || return 1

	# Decode the certificate from the secret
	local CERT=""
	CERT="$(jq --arg key "${KEY}" -r '.data[$key] // ""' 2>/dev/null <<< "${JSON}" | base64 -d 2>/dev/null)" || return 1

	# Verify the certificate
	openssl verify -x509_strict <(echo -n "${CERT}") &>/dev/null || return 1

	# Verify that it's a CA certificate
	openssl x509 -noout -in <(echo -n "${CERT}") -ext basicConstraints | tr ',' '\n' | tail -n +2 | grep -q -i -e '^[[:space:]]*CA:TRUE[[:space:]]*$' || return 1

	# Ok ... it's valid, and is a CA ... use it!
	return 0
}

cleanup()
{
	[ -v TEMPDIR ] && [ -n "${TEMPDIR}" ] && [ -d "${TEMPDIR}" ] && rm -rf "${TEMPDIR}" &>/dev/null
}

CONTEXT="local"
NAMESPACE="arkcase-system"
SECRET_NAME="arkcase-root-ca"

# Check if the CA exists in the cluster
EXISTS="true"
doing "Attempting to validate the existing certificate"
validate_cert_secret "${CONTEXT}" "${NAMESPACE}" "${SECRET_NAME}" "crt" && quit "The ArkCase CA already exists and is still valid (from ${NAMESPACE}::${SECRET_NAME})"

# Delete the existing stuff, if any
kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" delete secret "${SECRET_NAME}" &>/dev/null || true

# Create the new CA!
TEMPDIR="$(mktemp -d)"
trap cleanup EXIT

CERT="${TEMPDIR}/ca.crt"
KEY="${TEMPDIR}/ca.key"

[ -v KEYBITS ] || KEYBITS=""
[ -n "${KEYBITS}" ] || KEYBITS="2048"
[[ "${KEYBITS}" =~ ^[1-9][0-9]*$ ]] || fail "The bit size [${KEYBITS}] is invalid"

doing "Rendering a new CA certificate for ArkCase"
openssl genrsa -out "${KEY}" ${KEYBITS} || fail "Failed to render a new private key for the CA"
ok "A new ${KEYBITS} bit private key was rendered!"
OPENSSL_CONFIG="$(cat <<-EOF
	[ req ]
	distinguished_name=dn
	[ dn ]
	[ ext ]
	basicConstraints=critical,CA:TRUE,pathlen:1
	keyUsage=critical,keyCertSign,cRLSign
EOF
)"
openssl req \
	-new -x509 -nodes \
	-days 36500 \
	-key "${KEY}" \
	-out "${CERT}" \
	-config <(echo "${OPENSSL_CONFIG}") \
	-extensions ext \
	-subj "/CN=ArkCase Global Root CA/" || fail "Failed to render a new CA certificate"
ok "The new CA Certificate was rendered:\n\n$(openssl x509 -noout -text -in "${CERT}")\n\n" || \
	fail "Failed to read back the generated certificate"

say "Creating the secret ${NAMESPACE}::${SECRET_NAME} with the ArkCase CA"

# If the namespace doesn't exist
kubectl --context "${CONTEXT}" create namespace "${NAMESPACE}" &>/dev/null || true

kubectl \
	--context "${CONTEXT}" \
	--namespace "${NAMESPACE}" \
	create secret generic "${SECRET_NAME}" \
	--from-file=crt="${CERT}" \
	--from-file=key="${KEY}" || fail "Failed to create the secret (rc=${?})!"
ok "Secret created!"

doing "Adding the generated certificate to all required truststores"
"${SCRIPT_DIR}/trust-cert" "${CERT}"
